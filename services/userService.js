import api from "./api";
import AsyncStorage from "@react-native-async-storage/async-storage";

/**
 * ========================================
 * SERVI√áO DE USU√ÅRIOS E AUTENTICA√á√ÉO
 * ========================================
 * Gerencia todas as opera√ß√µes relacionadas a usu√°rios:
 * - Login/Logout
 * - Registro de clientes
 * - Redefini√ß√£o de senha
 * - Gerenciamento de perfil
 */

/**
 * Autentica o usu√°rio e salva o token.
 * @param {string} email - Email do usu√°rio
 * @param {string} password - Senha do usu√°rio
 * @returns {Promise<object>} - Dados do usu√°rio e token de acesso
 */
export const login = async (userData) => {
  try {

    // Faz a requisi√ß√£o j√° com userData (que deve ter { email, password })
    const response = await api.post("/users/login", userData);

    if (response.data.access_token) {
      await AsyncStorage.setItem("user_token", response.data.access_token);

      // Verificar se existem dados do usu√°rio na resposta
      if (response.data.user) {
        await AsyncStorage.setItem(
          "user_data",
          JSON.stringify(response.data.user)
        );
      } else {
        // Se n√£o houver dados do usu√°rio, criar um objeto b√°sico
        const basicUserData = {
          email: userData.email,
          full_name: response.data.full_name || "Usu√°rio",
          role: "customer",
        };
        await AsyncStorage.setItem("user_data", JSON.stringify(basicUserData));
      }
    }

    return response.data;
  } catch (error) {
    console.error("‚ùå Erro no login:", error);
    throw error;
  }
};

/**
 * Faz logout, invalidando o token no backend e removendo-o localmente.
 * @returns {Promise<void>}
 */
export const logout = async () => {
  try {
    console.log("üö™ Logout service");
    // Tenta invalidar o token no backend
    await api.post("/users/logout");
  } catch (error) {
    // Mesmo se der erro no backend, remove o token localmente
    console.warn("‚ö†Ô∏è Erro ao fazer logout no backend:", error);
  } finally {
    // Remove os dados do usu√°rio do armazenamento local
    await AsyncStorage.removeItem("user_token");
    await AsyncStorage.removeItem("user_data");
    console.log("‚úÖ Logout realizado com sucesso");
  }
};

/**
 * Verifica se o usu√°rio est√° autenticado.
 * @returns {Promise<boolean>} - True se o usu√°rio estiver autenticado
 */
export const isAuthenticated = async () => {
  try {
    const token = await AsyncStorage.getItem("user_token");
    return !!token;
  } catch (error) {
    console.error("‚ùå Erro ao verificar autentica√ß√£o:", error);
    return false;
  }
};

/**
 * Obt√©m os dados do usu√°rio armazenados localmente.
 * @returns {Promise<object|null>} - Dados do usu√°rio ou null se n√£o encontrado
 */
export const getStoredUserData = async () => {
  try {
    const userData = await AsyncStorage.getItem("user_data");
    return userData ? JSON.parse(userData) : null;
  } catch (error) {
    console.error("‚ùå Erro ao obter dados do usu√°rio:", error);
    return null;
  }
};

/**
 * Obt√©m o token de acesso armazenado.
 * @returns {Promise<string|null>} - Token de acesso ou null se n√£o encontrado
 */
export const getStoredToken = async () => {
  try {
    return await AsyncStorage.getItem("user_token");
  } catch (error) {
    console.error("‚ùå Erro ao obter token:", error);
    return null;
  }
};

/**
 * Solicita redefini√ß√£o de senha.
 * @param {string} email - Email do usu√°rio
 * @returns {Promise<object>} - Resposta da API
 */
export const requestPasswordReset = async (email) => {
  try {
    console.log("üìß Solicita√ß√£o de redefini√ß√£o de senha para:", email);
    const response = await api.post("/users/forgot-password", { email });
    return response.data;
  } catch (error) {
    console.error("‚ùå Erro ao solicitar redefini√ß√£o de senha:", error);
    throw error;
  }
};

/**
 * Redefine a senha do usu√°rio.
 * @param {string} token - Token de redefini√ß√£o
 * @param {string} newPassword - Nova senha
 * @returns {Promise<object>} - Resposta da API
 */
export const resetPassword = async (token, newPassword) => {
  try {
    console.log("üîë Redefinindo senha");
    const response = await api.post("/users/reset-password", {
      token,
      new_password: newPassword,
    });
    return response.data;
  } catch (error) {
    console.error("‚ùå Erro ao redefinir senha:", error);
    throw error;
  }
};

/**
 * Atualiza o perfil do usu√°rio.
 * @param {object} userData - Dados do usu√°rio para atualizar
 * @returns {Promise<object>} - Dados atualizados do usu√°rio
 */
export const updateProfile = async (userData) => {
  try {
    console.log("üë§ Atualizando perfil:", userData);
    const response = await api.put("/users/profile", userData);

    // Atualiza os dados locais se a atualiza√ß√£o foi bem-sucedida
    if (response.data) {
      await AsyncStorage.setItem("user_data", JSON.stringify(response.data));
    }

    return response.data;
  } catch (error) {
    console.error("‚ùå Erro ao atualizar perfil:", error);
    throw error;
  }
};

/**
 * Altera a senha do usu√°rio.
 * @param {string} currentPassword - Senha atual
 * @param {string} newPassword - Nova senha
 * @returns {Promise<object>} - Resposta da API
 */
export const changePassword = async (currentPassword, newPassword) => {
  try {
    console.log("üîê Alterando senha");
    const response = await api.put("/users/change-password", {
      current_password: currentPassword,
      new_password: newPassword,
    });
    return response.data;
  } catch (error) {
    console.error("‚ùå Erro ao alterar senha:", error);
    throw error;
  }
};

/**
 * Obt√©m o perfil completo do usu√°rio.
 * @returns {Promise<object>} - Dados completos do usu√°rio
 */
export const getProfile = async () => {
  try {
    console.log("üë§ Obtendo perfil do usu√°rio");
    const response = await api.get("/users/profile");
    return response.data;
  } catch (error) {
    console.error("‚ùå Erro ao obter perfil:", error);
    throw error;
  }
};

/**
 * Deleta a conta do usu√°rio.
 * @param {string} password - Senha para confirma√ß√£o
 * @returns {Promise<object>} - Resposta da API
 */
export const deleteAccount = async (password) => {
  try {
    console.log("üóëÔ∏è Deletando conta do usu√°rio");
    const response = await api.delete("/users/account", {
      data: { password },
    });

    // Remove dados locais ap√≥s deletar a conta
    await AsyncStorage.removeItem("user_token");
    await AsyncStorage.removeItem("user_data");

    return response.data;
  } catch (error) {
    console.error("‚ùå Erro ao deletar conta:", error);
    throw error;
  }
};
