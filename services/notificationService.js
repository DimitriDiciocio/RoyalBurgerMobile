import api from "./api";

/**
 * ========================================
 * SERVI√áO DE NOTIFICA√á√ïES
 * ========================================
 * Gerencia todas as opera√ß√µes relacionadas a notifica√ß√µes:
 * - Listagem de notifica√ß√µes
 * - Marcar como lida
 * - Configura√ß√µes de notifica√ß√£o
 * - Push notifications
 */

/**
 * Obt√©m todas as notifica√ß√µes do usu√°rio logado.
 * @param {object} filters - Filtros opcionais (status, type, date_from, date_to)
 * @returns {Promise<Array>} - Lista de notifica√ß√µes
 */
export const getMyNotifications = async (filters = {}) => {
  try {
    console.log("üîî Obtendo minhas notifica√ß√µes com filtros:", filters);
    const response = await api.get("/notifications", { params: filters });
    return response.data;
  } catch (error) {
    console.error("‚ùå Erro ao obter notifica√ß√µes:", error);
    throw error;
  }
};

/**
 * Obt√©m notifica√ß√µes n√£o lidas.
 * @param {object} filters - Filtros adicionais
 * @returns {Promise<Array>} - Lista de notifica√ß√µes n√£o lidas
 */
export const getUnreadNotifications = async (filters = {}) => {
  try {
    console.log("üîî Obtendo notifica√ß√µes n√£o lidas");
    const response = await api.get("/notifications/unread", {
      params: filters,
    });
    return response.data;
  } catch (error) {
    console.error("‚ùå Erro ao obter notifica√ß√µes n√£o lidas:", error);
    throw error;
  }
};

/**
 * Obt√©m uma notifica√ß√£o espec√≠fica por ID.
 * @param {number} notificationId - ID da notifica√ß√£o
 * @returns {Promise<object>} - Dados da notifica√ß√£o
 */
export const getNotificationById = async (notificationId) => {
  try {
    console.log("üîî Obtendo notifica√ß√£o por ID:", notificationId);
    const response = await api.get(`/notifications/${notificationId}`);
    return response.data;
  } catch (error) {
    console.error("‚ùå Erro ao obter notifica√ß√£o:", error);
    throw error;
  }
};

/**
 * Marca uma notifica√ß√£o como lida.
 * @param {number} notificationId - ID da notifica√ß√£o
 * @returns {Promise<object>} - Resposta da API
 */
export const markNotificationAsRead = async (notificationId) => {
  try {
    console.log("‚úÖ Marcando notifica√ß√£o como lida:", notificationId);
    const response = await api.put(`/notifications/${notificationId}/read`);
    return response.data;
  } catch (error) {
    console.error("‚ùå Erro ao marcar notifica√ß√£o como lida:", error);
    throw error;
  }
};

/**
 * Marca m√∫ltiplas notifica√ß√µes como lidas.
 * @param {Array} notificationIds - IDs das notifica√ß√µes
 * @returns {Promise<object>} - Resposta da API
 */
export const markNotificationsAsRead = async (notificationIds) => {
  try {
    console.log("‚úÖ Marcando notifica√ß√µes como lidas:", notificationIds);
    const response = await api.put("/notifications/mark-read", {
      notification_ids: notificationIds,
    });
    return response.data;
  } catch (error) {
    console.error("‚ùå Erro ao marcar notifica√ß√µes como lidas:", error);
    throw error;
  }
};

/**
 * Marca todas as notifica√ß√µes como lidas.
 * @returns {Promise<object>} - Resposta da API
 */
export const markAllNotificationsAsRead = async () => {
  try {
    console.log("‚úÖ Marcando todas as notifica√ß√µes como lidas");
    const response = await api.put("/notifications/mark-all-read");
    return response.data;
  } catch (error) {
    console.error("‚ùå Erro ao marcar todas as notifica√ß√µes como lidas:", error);
    throw error;
  }
};

/**
 * Remove uma notifica√ß√£o.
 * @param {number} notificationId - ID da notifica√ß√£o
 * @returns {Promise<object>} - Resposta da API
 */
export const deleteNotification = async (notificationId) => {
  try {
    console.log("üóëÔ∏è Removendo notifica√ß√£o:", notificationId);
    const response = await api.delete(`/notifications/${notificationId}`);
    return response.data;
  } catch (error) {
    console.error("‚ùå Erro ao remover notifica√ß√£o:", error);
    throw error;
  }
};

/**
 * Remove m√∫ltiplas notifica√ß√µes.
 * @param {Array} notificationIds - IDs das notifica√ß√µes
 * @returns {Promise<object>} - Resposta da API
 */
export const deleteNotifications = async (notificationIds) => {
  try {
    console.log("üóëÔ∏è Removendo notifica√ß√µes:", notificationIds);
    const response = await api.delete("/notifications/delete-multiple", {
      data: { notification_ids: notificationIds },
    });
    return response.data;
  } catch (error) {
    console.error("‚ùå Erro ao remover notifica√ß√µes:", error);
    throw error;
  }
};

/**
 * Remove todas as notifica√ß√µes lidas.
 * @returns {Promise<object>} - Resposta da API
 */
export const deleteAllReadNotifications = async () => {
  try {
    console.log("üóëÔ∏è Removendo todas as notifica√ß√µes lidas");
    const response = await api.delete("/notifications/delete-read");
    return response.data;
  } catch (error) {
    console.error("‚ùå Erro ao remover notifica√ß√µes lidas:", error);
    throw error;
  }
};

/**
 * Obt√©m notifica√ß√µes por tipo.
 * @param {string} type - Tipo da notifica√ß√£o (order, promotion, system, etc.)
 * @param {object} filters - Filtros adicionais
 * @returns {Promise<Array>} - Lista de notifica√ß√µes do tipo
 */
export const getNotificationsByType = async (type, filters = {}) => {
  try {
    console.log("üîî Obtendo notifica√ß√µes por tipo:", type);
    const response = await api.get(`/notifications/type/${type}`, {
      params: filters,
    });
    return response.data;
  } catch (error) {
    console.error("‚ùå Erro ao obter notifica√ß√µes por tipo:", error);
    throw error;
  }
};

/**
 * Obt√©m notifica√ß√µes por status.
 * @param {string} status - Status da notifica√ß√£o (read, unread)
 * @param {object} filters - Filtros adicionais
 * @returns {Promise<Array>} - Lista de notifica√ß√µes do status
 */
export const getNotificationsByStatus = async (status, filters = {}) => {
  try {
    console.log("üîî Obtendo notifica√ß√µes por status:", status);
    const response = await api.get(`/notifications/status/${status}`, {
      params: filters,
    });
    return response.data;
  } catch (error) {
    console.error("‚ùå Erro ao obter notifica√ß√µes por status:", error);
    throw error;
  }
};

/**
 * Obt√©m notifica√ß√µes recentes.
 * @param {number} limit - Limite de notifica√ß√µes (padr√£o: 10)
 * @param {object} filters - Filtros adicionais
 * @returns {Promise<Array>} - Lista de notifica√ß√µes recentes
 */
export const getRecentNotifications = async (limit = 10, filters = {}) => {
  try {
    console.log("üîî Obtendo notifica√ß√µes recentes (limite:", limit, ")");
    const response = await api.get("/notifications/recent", {
      params: { limit, ...filters },
    });
    return response.data;
  } catch (error) {
    console.error("‚ùå Erro ao obter notifica√ß√µes recentes:", error);
    throw error;
  }
};

/**
 * Obt√©m configura√ß√µes de notifica√ß√£o do usu√°rio.
 * @returns {Promise<object>} - Configura√ß√µes de notifica√ß√£o
 */
export const getNotificationSettings = async () => {
  try {
    console.log("‚öôÔ∏è Obtendo configura√ß√µes de notifica√ß√£o");
    const response = await api.get("/notifications/settings");
    return response.data;
  } catch (error) {
    console.error("‚ùå Erro ao obter configura√ß√µes de notifica√ß√£o:", error);
    throw error;
  }
};

/**
 * Atualiza configura√ß√µes de notifica√ß√£o do usu√°rio.
 * @param {object} settings - Novas configura√ß√µes
 * @returns {Promise<object>} - Configura√ß√µes atualizadas
 */
export const updateNotificationSettings = async (settings) => {
  try {
    console.log("‚öôÔ∏è Atualizando configura√ß√µes de notifica√ß√£o:", settings);
    const response = await api.put("/notifications/settings", settings);
    return response.data;
  } catch (error) {
    console.error("‚ùå Erro ao atualizar configura√ß√µes de notifica√ß√£o:", error);
    throw error;
  }
};

/**
 * Registra token de push notification.
 * @param {string} token - Token do dispositivo
 * @param {string} platform - Plataforma (ios, android)
 * @returns {Promise<object>} - Resposta da API
 */
export const registerPushToken = async (token, platform) => {
  try {
    console.log("üì± Registrando token de push notification:", platform);
    const response = await api.post("/notifications/register-token", {
      token,
      platform,
    });
    return response.data;
  } catch (error) {
    console.error("‚ùå Erro ao registrar token de push:", error);
    throw error;
  }
};

/**
 * Remove token de push notification.
 * @param {string} token - Token do dispositivo
 * @returns {Promise<object>} - Resposta da API
 */
export const unregisterPushToken = async (token) => {
  try {
    console.log("üì± Removendo token de push notification:", token);
    const response = await api.delete("/notifications/unregister-token", {
      data: { token },
    });
    return response.data;
  } catch (error) {
    console.error("‚ùå Erro ao remover token de push:", error);
    throw error;
  }
};

/**
 * Envia notifica√ß√£o de teste (apenas para admin/manager).
 * @param {object} notificationData - Dados da notifica√ß√£o
 * @returns {Promise<object>} - Resposta da API
 */
export const sendTestNotification = async (notificationData) => {
  try {
    console.log("üß™ Enviando notifica√ß√£o de teste:", notificationData);
    const response = await api.post(
      "/notifications/send-test",
      notificationData
    );
    return response.data;
  } catch (error) {
    console.error("‚ùå Erro ao enviar notifica√ß√£o de teste:", error);
    throw error;
  }
};

/**
 * Obt√©m estat√≠sticas de notifica√ß√µes.
 * @param {object} filters - Filtros opcionais
 * @returns {Promise<object>} - Estat√≠sticas das notifica√ß√µes
 */
export const getNotificationStats = async (filters = {}) => {
  try {
    console.log("üìä Obtendo estat√≠sticas de notifica√ß√µes");
    const response = await api.get("/notifications/stats", {
      params: filters,
    });
    return response.data;
  } catch (error) {
    console.error("‚ùå Erro ao obter estat√≠sticas de notifica√ß√µes:", error);
    throw error;
  }
};

/**
 * Obt√©m notifica√ß√µes por per√≠odo.
 * @param {string} period - Per√≠odo (today, week, month, year)
 * @param {object} filters - Filtros adicionais
 * @returns {Promise<Array>} - Lista de notifica√ß√µes do per√≠odo
 */
export const getNotificationsByPeriod = async (period, filters = {}) => {
  try {
    console.log("üìÖ Obtendo notifica√ß√µes por per√≠odo:", period);
    const response = await api.get(`/notifications/period/${period}`, {
      params: filters,
    });
    return response.data;
  } catch (error) {
    console.error("‚ùå Erro ao obter notifica√ß√µes por per√≠odo:", error);
    throw error;
  }
};

/**
 * Obt√©m notifica√ß√µes de pedidos.
 * @param {object} filters - Filtros opcionais
 * @returns {Promise<Array>} - Lista de notifica√ß√µes de pedidos
 */
export const getOrderNotifications = async (filters = {}) => {
  try {
    console.log("üõí Obtendo notifica√ß√µes de pedidos");
    const response = await api.get("/notifications/orders", {
      params: filters,
    });
    return response.data;
  } catch (error) {
    console.error("‚ùå Erro ao obter notifica√ß√µes de pedidos:", error);
    throw error;
  }
};

/**
 * Obt√©m notifica√ß√µes de promo√ß√µes.
 * @param {object} filters - Filtros opcionais
 * @returns {Promise<Array>} - Lista de notifica√ß√µes de promo√ß√µes
 */
export const getPromotionNotifications = async (filters = {}) => {
  try {
    console.log("üè∑Ô∏è Obtendo notifica√ß√µes de promo√ß√µes");
    const response = await api.get("/notifications/promotions", {
      params: filters,
    });
    return response.data;
  } catch (error) {
    console.error("‚ùå Erro ao obter notifica√ß√µes de promo√ß√µes:", error);
    throw error;
  }
};

/**
 * Obt√©m notifica√ß√µes do sistema.
 * @param {object} filters - Filtros opcionais
 * @returns {Promise<Array>} - Lista de notifica√ß√µes do sistema
 */
export const getSystemNotifications = async (filters = {}) => {
  try {
    console.log("‚öôÔ∏è Obtendo notifica√ß√µes do sistema");
    const response = await api.get("/notifications/system", {
      params: filters,
    });
    return response.data;
  } catch (error) {
    console.error("‚ùå Erro ao obter notifica√ß√µes do sistema:", error);
    throw error;
  }
};
