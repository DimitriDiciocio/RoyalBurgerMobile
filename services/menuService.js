import api from "./api";

/**
 * ========================================
 * SERVI√áO DE MENU
 * ========================================
 * Gerencia todas as opera√ß√µes relacionadas ao menu:
 * - Obter menu completo
 * - Menu por categoria
 * - Produtos em destaque
 * - Promo√ß√µes ativas
 * - Menu personalizado
 */

/**
 * Obt√©m o menu completo.
 * @param {object} filters - Filtros opcionais (category, status, etc.)
 * @returns {Promise<object>} - Menu completo organizado por se√ß√µes
 */
export const getFullMenu = async (filters = {}) => {
  try {
    "üçΩÔ∏è Obtendo menu completo com filtros:", filters;
    const response = await api.get("/menu", { params: filters });
    return response.data;
  } catch (error) {
    throw error;
  }
};

/**
 * Obt√©m o menu por categoria/se√ß√£o.
 * @param {number} sectionId - ID da se√ß√£o
 * @param {object} filters - Filtros adicionais
 * @returns {Promise<Array>} - Produtos da se√ß√£o
 */
export const getMenuBySection = async (sectionId, filters = {}) => {
  try {
    "üìÇ Obtendo menu da se√ß√£o:", sectionId;
    const response = await api.get(`/menu/section/${sectionId}`, {
      params: filters,
    });
    return response.data;
  } catch (error) {
    throw error;
  }
};

/**
 * Obt√©m produtos em destaque.
 * @param {number} limit - Limite de produtos (padr√£o: 6)
 * @returns {Promise<Array>} - Lista de produtos em destaque
 */
export const getFeaturedProducts = async (limit = 6) => {
  try {
    "‚≠ê Obtendo produtos em destaque (limite:", limit, ")";
    const response = await api.get("/menu/featured", {
      params: { limit },
    });
    return response.data;
  } catch (error) {
    throw error;
  }
};

/**
 * Obt√©m produtos em promo√ß√£o.
 * @param {object} filters - Filtros opcionais
 * @returns {Promise<Array>} - Lista de produtos em promo√ß√£o
 */
export const getPromotionalProducts = async (filters = {}) => {
  try {
    ("üè∑Ô∏è Obtendo produtos em promo√ß√£o");
    const response = await api.get("/menu/promotions", {
      params: filters,
    });
    return response.data;
  } catch (error) {
    throw error;
  }
};

/**
 * Obt√©m produtos mais vendidos.
 * @param {number} limit - Limite de produtos (padr√£o: 10)
 * @param {string} period - Per√≠odo (day, week, month, year)
 * @returns {Promise<Array>} - Lista de produtos mais vendidos
 */
export const getBestSellingProducts = async (limit = 10, period = "month") => {
  try {
    "üèÜ Obtendo produtos mais vendidos (limite:",
      limit,
      "per√≠odo:",
      period,
      ")";
    const response = await api.get("/menu/best-selling", {
      params: { limit, period },
    });
    return response.data;
  } catch (error) {
    throw error;
  }
};

/**
 * Obt√©m produtos recomendados para um usu√°rio.
 * @param {number} userId - ID do usu√°rio
 * @param {number} limit - Limite de produtos (padr√£o: 5)
 * @returns {Promise<Array>} - Lista de produtos recomendados
 */
export const getRecommendedProducts = async (userId, limit = 5) => {
  try {
    "üí° Obtendo produtos recomendados para usu√°rio:", userId;
    const response = await api.get(`/menu/recommendations/${userId}`, {
      params: { limit },
    });
    return response.data;
  } catch (error) {
    throw error;
  }
};

/**
 * Busca produtos no menu.
 * @param {string} searchTerm - Termo de busca
 * @param {object} filters - Filtros adicionais
 * @returns {Promise<Array>} - Lista de produtos encontrados
 */
export const searchMenuProducts = async (searchTerm, filters = {}) => {
  try {
    "üîç Buscando produtos no menu:", searchTerm;
    const response = await api.get("/menu/search", {
      params: { q: searchTerm, ...filters },
    });
    return response.data;
  } catch (error) {
    throw error;
  }
};

/**
 * Obt√©m categorias/se√ß√µes do menu.
 * @param {object} filters - Filtros opcionais
 * @returns {Promise<Array>} - Lista de categorias
 */
export const getMenuCategories = async (filters = {}) => {
  try {
    ("üìÇ Obtendo categorias do menu");
    const response = await api.get("/menu/categories", {
      params: filters,
    });
    return response.data;
  } catch (error) {
    throw error;
  }
};

/**
 * Obt√©m um produto espec√≠fico do menu.
 * @param {number} productId - ID do produto
 * @returns {Promise<object>} - Dados do produto
 */
export const getMenuProduct = async (productId) => {
  try {
    "üçî Obtendo produto do menu:", productId;
    const response = await api.get(`/menu/products/${productId}`);
    return response.data;
  } catch (error) {
    throw error;
  }
};

/**
 * Obt√©m ingredientes de um produto do menu.
 * @param {number} productId - ID do produto
 * @returns {Promise<Array>} - Lista de ingredientes
 */
export const getMenuProductIngredients = async (productId) => {
  try {
    "ü•¨ Obtendo ingredientes do produto:", productId;
    const response = await api.get(`/menu/products/${productId}/ingredients`);
    return response.data;
  } catch (error) {
    throw error;
  }
};

/**
 * Obt√©m op√ß√µes de personaliza√ß√£o de um produto.
 * @param {number} productId - ID do produto
 * @returns {Promise<Array>} - Lista de op√ß√µes de personaliza√ß√£o
 */
export const getProductCustomizationOptions = async (productId) => {
  try {
    "‚öôÔ∏è Obtendo op√ß√µes de personaliza√ß√£o do produto:", productId;
    const response = await api.get(
      `/menu/products/${productId}/customizations`
    );
    return response.data;
  } catch (error) {
    throw error;
  }
};

/**
 * Obt√©m produtos similares a um produto.
 * @param {number} productId - ID do produto
 * @param {number} limit - Limite de produtos (padr√£o: 4)
 * @returns {Promise<Array>} - Lista de produtos similares
 */
export const getSimilarProducts = async (productId, limit = 4) => {
  try {
    "üîÑ Obtendo produtos similares ao produto:", productId;
    const response = await api.get(`/menu/products/${productId}/similar`, {
      params: { limit },
    });
    return response.data;
  } catch (error) {
    throw error;
  }
};

/**
 * Obt√©m produtos por faixa de pre√ßo.
 * @param {number} minPrice - Pre√ßo m√≠nimo
 * @param {number} maxPrice - Pre√ßo m√°ximo
 * @param {object} filters - Filtros adicionais
 * @returns {Promise<Array>} - Lista de produtos na faixa de pre√ßo
 */
export const getProductsByPriceRange = async (
  minPrice,
  maxPrice,
  filters = {}
) => {
  try {
    "üí∞ Obtendo produtos por faixa de pre√ßo:", minPrice, "-", maxPrice;
    const response = await api.get("/menu/price-range", {
      params: { min_price: minPrice, max_price: maxPrice, ...filters },
    });
    return response.data;
  } catch (error) {
    throw error;
  }
};

/**
 * Obt√©m produtos por ingrediente.
 * @param {string} ingredient - Nome do ingrediente
 * @param {object} filters - Filtros adicionais
 * @returns {Promise<Array>} - Lista de produtos com o ingrediente
 */
export const getProductsByIngredient = async (ingredient, filters = {}) => {
  try {
    "ü•¨ Obtendo produtos por ingrediente:", ingredient;
    const response = await api.get("/menu/by-ingredient", {
      params: { ingredient, ...filters },
    });
    return response.data;
  } catch (error) {
    throw error;
  }
};

/**
 * Obt√©m produtos sem um ingrediente espec√≠fico.
 * @param {string} ingredient - Nome do ingrediente a excluir
 * @param {object} filters - Filtros adicionais
 * @returns {Promise<Array>} - Lista de produtos sem o ingrediente
 */
export const getProductsWithoutIngredient = async (
  ingredient,
  filters = {}
) => {
  try {
    "üö´ Obtendo produtos sem ingrediente:", ingredient;
    const response = await api.get("/menu/without-ingredient", {
      params: { ingredient, ...filters },
    });
    return response.data;
  } catch (error) {
    throw error;
  }
};

/**
 * Obt√©m produtos vegetarianos.
 * @param {object} filters - Filtros adicionais
 * @returns {Promise<Array>} - Lista de produtos vegetarianos
 */
export const getVegetarianProducts = async (filters = {}) => {
  try {
    ("ü•¨ Obtendo produtos vegetarianos");
    const response = await api.get("/menu/vegetarian", {
      params: filters,
    });
    return response.data;
  } catch (error) {
    throw error;
  }
};

/**
 * Obt√©m produtos veganos.
 * @param {object} filters - Filtros adicionais
 * @returns {Promise<Array>} - Lista de produtos veganos
 */
export const getVeganProducts = async (filters = {}) => {
  try {
    ("üå± Obtendo produtos veganos");
    const response = await api.get("/menu/vegan", {
      params: filters,
    });
    return response.data;
  } catch (error) {
    throw error;
  }
};

/**
 * Obt√©m produtos sem gl√∫ten.
 * @param {object} filters - Filtros adicionais
 * @returns {Promise<Array>} - Lista de produtos sem gl√∫ten
 */
export const getGlutenFreeProducts = async (filters = {}) => {
  try {
    ("üåæ Obtendo produtos sem gl√∫ten");
    const response = await api.get("/menu/gluten-free", {
      params: filters,
    });
    return response.data;
  } catch (error) {
    throw error;
  }
};

/**
 * Obt√©m produtos sem lactose.
 * @param {object} filters - Filtros adicionais
 * @returns {Promise<Array>} - Lista de produtos sem lactose
 */
export const getLactoseFreeProducts = async (filters = {}) => {
  try {
    ("ü•õ Obtendo produtos sem lactose");
    const response = await api.get("/menu/lactose-free", {
      params: filters,
    });
    return response.data;
  } catch (error) {
    throw error;
  }
};

/**
 * Obt√©m produtos por n√≠vel de pic√¢ncia.
 * @param {string} spiceLevel - N√≠vel de pic√¢ncia (mild, medium, hot, extra_hot)
 * @param {object} filters - Filtros adicionais
 * @returns {Promise<Array>} - Lista de produtos com o n√≠vel de pic√¢ncia
 */
export const getProductsBySpiceLevel = async (spiceLevel, filters = {}) => {
  try {
    "üå∂Ô∏è Obtendo produtos por n√≠vel de pic√¢ncia:", spiceLevel;
    const response = await api.get("/menu/spice-level", {
      params: { spice_level: spiceLevel, ...filters },
    });
    return response.data;
  } catch (error) {
    throw error;
  }
};

/**
 * Obt√©m produtos por tempo de preparo.
 * @param {number} maxPrepTime - Tempo m√°ximo de preparo em minutos
 * @param {object} filters - Filtros adicionais
 * @returns {Promise<Array>} - Lista de produtos com tempo de preparo
 */
export const getProductsByPrepTime = async (maxPrepTime, filters = {}) => {
  try {
    "‚è±Ô∏è Obtendo produtos por tempo de preparo:", maxPrepTime, "min";
    const response = await api.get("/menu/prep-time", {
      params: { max_prep_time: maxPrepTime, ...filters },
    });
    return response.data;
  } catch (error) {
    throw error;
  }
};
